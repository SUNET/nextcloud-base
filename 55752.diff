diff --git a/apps/cloud_federation_api/lib/Controller/RequestHandlerController.php b/apps/cloud_federation_api/lib/Controller/RequestHandlerController.php
index a76b1884a0be7..ba994e4e1433e 100644
--- a/apps/cloud_federation_api/lib/Controller/RequestHandlerController.php
+++ b/apps/cloud_federation_api/lib/Controller/RequestHandlerController.php
@@ -106,6 +106,19 @@ public function __construct(
 	#[NoCSRFRequired]
 	#[BruteForceProtection(action: 'receiveFederatedShare')]
 	public function addShare($shareWith, $name, $description, $providerId, $owner, $ownerDisplayName, $sharedBy, $sharedByDisplayName, $protocol, $shareType, $resourceType) {
+		if ($protocol['name'] === 'multi') {
+			if (isset($protocol['webdav'])) {
+				$webdav = $protocol['webdav'];
+				$protocol = [
+					'name' => 'webdav',
+					'options' => [
+						'sharedSecret' => $webdav['sharedSecret'],
+						'permissions' => '{http://open-cloud-mesh.org/ns}share-permissions',
+					],
+				];
+			}
+		}
+
 		try {
 			// if request is signed and well signed, no exception are thrown
 			// if request is not signed and host is known for not supporting signed request, no exception are thrown
@@ -115,7 +128,6 @@ public function addShare($shareWith, $name, $description, $providerId, $owner, $
 			$this->logger->warning('incoming request exception', ['exception' => $e]);
 			return new JSONResponse(['message' => $e->getMessage(), 'validationErrors' => []], Http::STATUS_BAD_REQUEST);
 		}
-
 		// check if all required parameters are set
 		if (
 			$shareWith === null
@@ -236,7 +248,7 @@ public function addShare($shareWith, $name, $description, $providerId, $owner, $
 	 *
 	 * @param string $recipientProvider The address of the recipent's provider
 	 * @param string $token The token used for the invitation
-	 * @param string $userId The userId of the recipient at the recipient's provider
+	 * @param string $userID The userID of the recipient at the recipient's provider
 	 * @param string $email The email address of the recipient
 	 * @param string $name The display name of the recipient
 	 *
@@ -251,8 +263,8 @@ public function addShare($shareWith, $name, $description, $providerId, $owner, $
 	#[PublicPage]
 	#[NoCSRFRequired]
 	#[BruteForceProtection(action: 'inviteAccepted')]
-	public function inviteAccepted(string $recipientProvider, string $token, string $userId, string $email, string $name): JSONResponse {
-		$this->logger->debug('Processing share invitation for ' . $userId . ' with token ' . $token . ' and email ' . $email . ' and name ' . $name);
+	public function inviteAccepted(string $recipientProvider, string $token, string $userID, string $email, string $name): JSONResponse {
+		$this->logger->debug('Processing share invitation for ' . $userID . ' with token ' . $token . ' and email ' . $email . ' and name ' . $name);
 
 		$updated = $this->timeFactory->getTime();
 
@@ -309,7 +321,7 @@ public function inviteAccepted(string $recipientProvider, string $token, string
 		$invitation->setRecipientEmail($email);
 		$invitation->setRecipientName($name);
 		$invitation->setRecipientProvider($recipientProvider);
-		$invitation->setRecipientUserId($userId);
+		$invitation->setRecipientUserId($userID);
 		$invitation->setAcceptedAt($updated);
 		$invitation = $this->federatedInviteMapper->update($invitation);
 
diff --git a/apps/federatedfilesharing/lib/OCM/CloudFederationProviderFiles.php b/apps/federatedfilesharing/lib/OCM/CloudFederationProviderFiles.php
index 1ce639532e842..48956ffbfcc8d 100644
--- a/apps/federatedfilesharing/lib/OCM/CloudFederationProviderFiles.php
+++ b/apps/federatedfilesharing/lib/OCM/CloudFederationProviderFiles.php
@@ -108,7 +108,7 @@ public function shareReceived(ICloudFederationShare $share) {
 
 		$token = $share->getShareSecret();
 		$name = $share->getResourceName();
-		$owner = $share->getOwnerDisplayName();
+		$owner = $share->getOwner();
 		$sharedBy = $share->getSharedByDisplayName();
 		$shareWith = $share->getShareWith();
 		$remoteId = $share->getProviderId();
@@ -130,15 +130,14 @@ public function shareReceived(ICloudFederationShare $share) {
 
 			// FIXME this should be a method in the user management instead
 			if ($shareType === IShare::TYPE_USER) {
-				$this->logger->debug('shareWith before, ' . $shareWith, ['app' => 'files_sharing']);
 				Util::emitHook(
 					'\OCA\Files_Sharing\API\Server2Server',
 					'preLoginNameUsedAsUserName',
 					['uid' => &$shareWith]
 				);
-				$this->logger->debug('shareWith after, ' . $shareWith, ['app' => 'files_sharing']);
 
 				if (!$this->userManager->userExists($shareWith)) {
+					$this->logger->debug('shareWith user does not exist, ' . $shareWith, ['app' => 'files_sharing']);
 					throw new ProviderCouldNotAddShareException('User does not exists', '', Http::STATUS_BAD_REQUEST);
 				}
 
